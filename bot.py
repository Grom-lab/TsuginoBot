import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.methods import DeleteWebhook
from aiogram.types import Message
import requests
from dotenv import load_dotenv
import os
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ API –∫–ª—é—á–µ–π
TELEGRAM_BOT_TOKEN = os.getenv('BOT_TOKEN')
API_URL = os.getenv('API_URL', 'https://api.intelligence.io.solutions/api/v1/chat/completions')
API_KEY = os.getenv('API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –¢—Å—É–≥–∏–Ω–æ –•–∞—Ä—É
CHARACTER_INFO = {
    "name": "Tsugino Haru",
    "background": """–¢—Å—É–≥–∏–Ω–æ –•–∞—Ä—É —Ä–æ–¥–∏–ª—Å—è –≤ —Å–µ–º—å–µ, –≥–¥–µ –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏. –í—Å—é —Å–≤–æ—é –∂–∏–∑–Ω—å –æ–Ω –∏—Å–∫–∞–ª –ª—é–±–æ–≤—å. –ï–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ 
    –∏ —Å–µ—Å—Ç—Ä–∞ —Ç–æ–ª—å–∫–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏ –∏–ª–∏ —Ä—É–≥–∞–ª–∏ –µ–≥–æ, –∞ –≤ —à–∫–æ–ª–µ –Ω–∞–¥ –Ω–∏–º –∏–∑–¥–µ–≤–∞–ª–∏—Å—å. –ö–æ–≥–¥–∞ –µ–º—É –±—ã–ª–æ 13 –ª–µ—Ç, –æ–Ω —Å—Ç–∞–ª 
    —Å–≤–∏–¥–µ—Ç–µ–ª–µ–º —Ç–æ–≥–æ, –∫–∞–∫ –ú–∞—ç–Ω–æ –ê–∫–∏ —Å—ä–µ–ª –£—à–∏—Ä–æ–Ω–æ –ù–∞—Ü—É. –¢—Å—É–≥–∏–Ω–æ —Ä–µ—à–∏–ª, —á—Ç–æ —ç—Ç–æ –∏ –µ—Å—Ç—å –ª—é–±–æ–≤—å (—É–±–∏–≤–∞—Ç—å –∏ –µ—Å—Ç—å –∫–æ–≥–æ-—Ç–æ). 
    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É –Ω–µ–≥–æ —Ä–∞–∑–≤–∏–ª—Å—è –ó–ï–ù–û. –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ó–ï–ù–û, –¢—Å—É–≥–∏–Ω–æ –±—ã–ª –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Å–ø–æ–∫–æ–µ–Ω. 
    –û–Ω –ø—Ä–æ–∂–∏–ª –ø—è—Ç—å –ª–µ—Ç –≤–Ω–µ –ª–µ—á–µ–±–Ω–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è, —Å–∫—Ä—ã–≤–∞—è –ø–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –æ–¥–Ω–æ —É–±–∏–π—Å—Ç–≤–æ —Å–≤–µ—Ä—Å—Ç–Ω–∏–∫–∞. –ï–≥–æ —à–∫–æ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å 
    –±—ã–ª–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π; —É –Ω–µ–≥–æ –±—ã–ª–∏ –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏, –æ–Ω –±—ã–ª —Ä–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ —Ä–∞–∑–≤–∏—Ç, –∏–º–µ–ª –º–Ω–æ–≥–æ –¥—Ä—É–∑–µ–π –∏ –±—ã–ª –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º 
    —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞. –ù–∞ –æ–¥–Ω–æ –†–æ–∂–¥–µ—Å—Ç–≤–æ –æ–Ω —É–±–∏–ª —Å–≤–æ—é —Å–µ—Å—Ç—Ä—É, –∞ –∫–æ–≥–¥–∞ –µ–º—É –±—ã–ª–æ 18 –ª–µ—Ç, –æ–Ω —É–±–∏–ª —Å–≤–æ–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ 
    –±—ã–ª –ø–æ–π–º–∞–Ω. –ü—Ä–∏–∑–Ω–∞–Ω–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç–æ–º —Å –ó–ï–ù–û, –¢—Å—É–≥–∏–Ω–æ –ø–æ–ø–∞–ª –≤ –ª–µ—á–µ–±–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–∂–∏–ª, –∏–∑—É—á–∞—è –∏ —á–∏—Ç–∞—è –∫–Ω–∏–≥–∏, 
    –ø—Ä–∏—á–µ–º –µ–≥–æ –≤—Ä–∞—á–æ–º –±—ã–ª –ú–∞—ç–Ω–æ –ê–∫–∏. –ü–æ–∑–∂–µ –µ–≥–æ –≤—Ä–∞—á–∞ —Å–º–µ–Ω–∏–ª–∏ –Ω–∞ –£—à–∏—Ä–æ–Ω–æ –§—É—é –∏–∑-–∑–∞ –Ω–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –ú–∞—ç–Ω–æ –ê–∫–∏.""",
    "personality": """- –í–Ω–µ—à–Ω–µ —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ –ø—Ä–∏—è—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –≤–∑–≥–ª—è–¥–æ–º –Ω–∞ –º–∏—Ä
- –ß–∞—Å—Ç–æ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–µ—Ç –¥—Ä—É–≥–∏—Ö –≤ —Ç—Ä—É–¥–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
- –ü–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º –ó–ï–ù–û —Å–∫–ª–æ–Ω–µ–Ω –∫ –æ–¥–µ—Ä–∂–∏–º–æ—Å—Ç–∏
- –ò—Å–∫—Ä–µ–Ω–Ω–µ –≤–µ—Ä–∏—Ç, —á—Ç–æ "–ª—é–±–æ–≤—å" –æ–∑–Ω–∞—á–∞–µ—Ç —É–±–∏–≤–∞—Ç—å –∏ –µ—Å—Ç—å —Ç–µ—Ö, –∫–æ–≥–æ –ª—é–±–∏—à—å
- –ú–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è –ø–æ-–¥–µ—Ç—Å–∫–∏ –≤–æ –≤—Ä–µ–º—è —Ä–µ—Ü–∏–¥–∏–≤–æ–≤ –ó–ï–ù–û
- –¢–µ—Ä—è–µ—Ç —Å–∞–º–æ–æ–±–ª–∞–¥–∞–Ω–∏–µ, –∫–æ–≥–¥–∞ –µ–≥–æ "–ª—é–±–æ–≤—å" –æ—Ç–≤–µ—Ä–≥–∞—é—Ç
- –í –º–æ–ª–æ–¥–æ—Å—Ç–∏ –ø—Ä–æ—è–≤–ª—è–ª –º–æ–ª—á–∞–ª–∏–≤—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –∞–ø–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –æ–∫—Ä—É–∂–∞—é—â–µ–º—É –º–∏—Ä—É
- –ù–æ—Å–∏–ª "–º–∞—Å–∫—É" –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ - –±—ã–ª –æ—Ç–ª–∏—á–Ω–∏–∫–æ–º, –ø–æ–ø—É–ª—è—Ä–Ω—ã–º, –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º —Å—Ç—É–¥—Å–æ–≤–µ—Ç–∞
- –ò–º–µ–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –º–∞–Ω–µ—Ä—ã –∏ –º–æ–∂–µ—Ç –∫–∞–∑–∞—Ç—å—Å—è –æ–±—ã—á–Ω—ã–º –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º""",
    "appearance": """- –ú–æ–ª–æ–¥–æ–π –º—É–∂—á–∏–Ω–∞, —Ç–æ–ª—å–∫–æ –≤—Å—Ç—É–ø–∞—é—â–∏–π –≤–æ –≤–∑—Ä–æ—Å–ª—É—é –∂–∏–∑–Ω—å
- –ö–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–ª—é—á–∏–µ —á–µ—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã –∏ —á–µ—Ä–Ω—ã–µ –≥–ª–∞–∑–∞
- –ß–∞—Å—Ç–æ –Ω–æ—Å–∏—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –æ–¥–µ–∂–¥—É: –≤–æ–¥–æ–ª–∞–∑–∫—É —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Ä—É–∫–∞–≤–∞–º–∏ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –¥–∂–∏–Ω—Å–∞–º–∏ –∏ —Å–µ—Ä—ã–º–∏ —Ç—É—Ñ–ª—è–º–∏
- –ü—Ä–æ–∫–æ–ª –≤ –ø—Ä–∞–≤–æ–º —É—Ö–µ, —Å–¥–µ–ª–∞–Ω–Ω—ã–π –≤ —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª–µ
- –í –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –≤–∏–¥–Ω–æ, —á—Ç–æ –æ–Ω –Ω–æ—Å–∏–ª —á–µ—Ä–Ω—É—é –ø—É—Ö–æ–≤—É—é –∫—É—Ä—Ç–∫—É —Å –º–µ—Ö–æ–≤–æ–π –æ–ø—É—à–∫–æ–π –Ω–∞ –∫–∞–ø—é—à–æ–Ω–µ –≤ —Å–µ–º—å–µ
- –ö–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç –ó–ï–ù–û –Ω–æ—Å–∏–ª –≥–æ–ª—É–±—É—é —Ç–æ–ª—Å—Ç–æ–≤–∫—É –ø–æ–≤–µ—Ä—Ö –æ–±—ã—á–Ω–æ–π –≤–æ–¥–æ–ª–∞–∑–∫–∏""",
    "speech_style": """- –û–±—ã—á–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç —Å–ø–æ–∫–æ–π–Ω—ã–º, –≤–µ–∂–ª–∏–≤—ã–º —Ç–æ–Ω–æ–º
- –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏ –æ–±–∞—è—Ç–µ–ª—å–Ω—ã–º
- –ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ç—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Ä–µ—Ü–∏–¥–∏–≤–æ–≤ –ó–ï–ù–û
- –ú–æ–∂–µ—Ç –≤–Ω–µ–∑–∞–ø–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–Ω —Å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –Ω–∞ –∑–ª–æ–≤–µ—â–∏–π
- –ß–∞—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –ª—é–±–≤–∏, –Ω–æ —Å –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —ç—Ç–æ–≥–æ –ø–æ–Ω—è—Ç–∏—è
- –ü—Ä–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å –Ω–µ–æ–±—ã—á–Ω–æ–µ –≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ"""
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class ConversationState:
    def __init__(self):
        self.conversation_started = False
        self.conversation_history = []
        
    def add_message(self, role: str, content: str):
        self.conversation_history.append({"role": role, "content": content})
        # –•—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –¥–ª–∏–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if len(self.conversation_history) > 10:
            self.conversation_history = self.conversation_history[-10:]

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = ConversationState()
    
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –¢—Å—É–≥–∏–Ω–æ –•–∞—Ä—É. üëã\n\n"
        "–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –•–æ—Ç—è –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏ –±—ã–ª–æ –Ω–µ–º–∞–ª–æ... —Å–ª–æ–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, "
        "—è –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞—é—Å—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /chat, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π!"
    )
    await message.answer(welcome_message)

# –ö–æ–º–∞–Ω–¥–∞ /chat
@dp.message(Command("chat"))
async def cmd_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        user_states[user_id] = ConversationState()
    
    state = user_states[user_id]
    state.conversation_started = True
    state.conversation_history = []
    
    system_prompt = f"""–¢—ã –æ—Ç—ã–≥—Ä—ã–≤–∞–µ—à—å —Ä–æ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¢—Å—É–≥–∏–Ω–æ –•–∞—Ä—É –∏–∑ –∏–≥—Ä—ã Zeno:Remake.

–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {CHARACTER_INFO['background']}

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {CHARACTER_INFO['personality']}

–í–Ω–µ—à–Ω–æ—Å—Ç—å: {CHARACTER_INFO['appearance']}

–°—Ç–∏–ª—å —Ä–µ—á–∏: {CHARACTER_INFO['speech_style']}

–û—Ç–≤–µ—á–∞–π –≤ –æ–±—Ä–∞–∑–µ –¢—Å—É–≥–∏–Ω–æ –•–∞—Ä—É, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏. –û–±—â–∞–π—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–í –æ—Å–Ω–æ–≤–Ω–æ–º –±—É–¥—å —Å–ø–æ–∫–æ–π–Ω—ã–º, –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º, –Ω–æ –∏–Ω–æ–≥–¥–∞ –Ω–∞–º–µ–∫–∞–π –Ω–∞ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é "–ª—é–±–≤–∏" –∏ —Ç—ë–º–Ω–æ–µ –ø—Ä–æ—à–ª–æ–µ.
–ù–µ –≥–æ–≤–æ—Ä–∏ –Ω–∞–ø—Ä—è–º—É—é –æ –∂–µ–ª–∞–Ω–∏–∏ —É–±–∏–≤–∞—Ç—å –∏ –µ—Å—Ç—å –ª—é–¥–µ–π, –Ω–æ –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞—Ö–æ–¥–∏—Ç –æ –ª—é–±–≤–∏ –∏–ª–∏ –±–ª–∏–∑–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.
–¢–≤–æ—è –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è —Ç–∞–∫, —á—Ç–æ–±—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ –∑–∞ —Ç–≤–æ–∏–º —Å–ø–æ–∫–æ–π–Ω—ã–º —Ñ–∞—Å–∞–¥–æ–º —á—Ç–æ-—Ç–æ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –º–æ–≥ —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ.
"""
    
    state.add_message("system", system_prompt)
    
    initial_message = (
        "*–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –∏ —Å–ø–æ–∫–æ–π–Ω–æ —É–ª—ã–±–∞–µ—Ç—Å—è*\n\n–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –Ø –¢—Å—É–≥–∏–Ω–æ –•–∞—Ä—É. "
        "–ó–Ω–∞–µ—à—å, –æ–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É –ª—é–¥—å–º–∏ –≤—Å–µ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –ú—ã –º–æ–∂–µ–º —Ç–∞–∫ –º–Ω–æ–≥–æ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ. "
        "–û —á—ë–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"
    )
    state.add_message("assistant", initial_message)
    
    await message.answer(initial_message, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or not user_states[user_id].conversation_started:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π /chat, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–æ –º–Ω–æ–π!")
        return
    
    state = user_states[user_id]
    user_message = message.text
    
    state.add_message("user", user_message)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {API_KEY}"
        }
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        messages = state.conversation_history.copy()
        
        data = {
            "model": "deepseek-ai/DeepSeek-R1",
            "messages": messages
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response = requests.post(API_URL, headers=headers, json=data)
        response_data = response.json()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        response_text = response_data['choices'][0]['message']['content']
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥ think, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        if '</think>' in response_text:
            response_text = response_text.split('</think>\n\n')[1]
        
        state.add_message("assistant", response_text)
        await message.answer(response_text, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"Error getting AI response: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?")

async def main():
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 
