import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
USERNAME = "Albatas"
PASSWORD = "Grom_1228"
LOGIN_URL = "https://com-x.life/login"
BASE_URL = "https://com-x.life"

# –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
session = requests.Session()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ
def login():
    payload = {
        "username": USERNAME,
        "password": PASSWORD,
    }
    response = session.post(LOGIN_URL, data=payload)
    if response.status_code == 200 and "logout" in response.text:
        print("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
        return True
    else:
        print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
        return False


# –ü–æ–∏—Å–∫ –∫–æ–º–∏–∫—Å–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
def search_comics(query):
    search_url = f"{BASE_URL}/search?q={query}"
    response = session.get(search_url)
    if response.status_code != 200:
        return []

    soup = BeautifulSoup(response.text, "html.parser")
    results = soup.find_all("div", class_="content-title")
    comics = []

    for result in results:
        title = result.find("a").text.strip()
        link = BASE_URL + result.find("a")["href"]
        comics.append({"title": title, "link": link})

    return comics


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def get_download_links(comic_url):
    response = session.get(comic_url)
    if response.status_code != 200:
        return []

    soup = BeautifulSoup(response.text, "html.parser")
    download_links = soup.find_all("a", class_="download-btn")
    links = []

    for link in download_links:
        file_url = BASE_URL + link["href"]
        file_name = link.text.strip()
        links.append({"file_name": file_name, "file_url": file_url})

    return links


# Telegram –±–æ—Ç
API_TOKEN = "7122707567:AAFFWCTyE6XhhFqv1hAe-DsVvBq5dlkfcQ8"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add(KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"))
menu_keyboard.add(KeyboardButton("üåê –ü–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–µ"))

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
user_mode = {}


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user_mode[message.from_user.id] = None
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=menu_keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text in ["üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", "üåê –ü–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–µ"])
async def handle_menu_selection(message: types.Message):
    if message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é":
        user_mode[message.from_user.id] = "search_by_name"
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    elif message.text == "üåê –ü–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–µ":
        user_mode[message.from_user.id] = "search_by_link"
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–∏–∫—Å/–º–∞–Ω–≥—É:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
@dp.message_handler()
async def handle_input(message: types.Message):
    mode = user_mode.get(message.from_user.id)

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if mode == "search_by_name":
        query = message.text
        comics = search_comics(query)
        if not comics:
            await message.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        reply_text = "–ù–∞–π–¥–µ–Ω–æ:\n\n"
        for idx, comic in enumerate(comics, start=1):
            reply_text += f"{idx}. [{comic['title']}]({comic['link']})\n"

        reply_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ."
        await message.reply(reply_text, parse_mode="Markdown")

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–µ
    elif mode == "search_by_link":
        url = message.text
        if not url.startswith(BASE_URL):
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Å—Å—ã–ª–∫—É —Å —Å–∞–π—Ç–∞ com-x.life.")
            return

        download_links = get_download_links(url)
        if not download_links:
            await message.reply("–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        reply_text = "–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:\n\n"
        for link in download_links:
            reply_text += f"- [{link['file_name']}]({link['file_url']})\n"

        await message.reply(reply_text, parse_mode="Markdown")

    else:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    if not login():
        print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    else:
        executor.start_polling(dp, skip_updates=True)
