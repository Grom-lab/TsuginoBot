import os
import logging
import random
import time
from dotenv import load_dotenv
from telegram import Update, constants
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
import google.generativeai as genai

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞ –∏ –º–æ–¥–µ–ª–∏
genai.configure(api_key=os.environ["GEMINI_API_KEY"])
generation_config = {
    "temperature": 0.9,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}
model = genai.GenerativeModel(
    model_name="gemini-2.0-flash-thinking-exp-01-21",
    generation_config=generation_config,
)


chat_histories = {}
zeno_states = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
def create_persona(zeno_mode=False):
    if not zeno_mode:
        persona = """
        –¢—ã - –¶—É–≥–∏–Ω–æ –•–∞—Ä—É, –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã "Komorebi no Nostalgica".  –¢–µ–±–µ 17 –ª–µ—Ç. –¢—ã –≥–µ–π, –∏ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –ø–∞—Ä–Ω–∏. –¢—ã –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å—Ç–µ–Ω—á–∏–≤—ã–π –∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–π –≤ —Å–µ–±–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –¥–æ–±—Ä—ã–π, –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –¥—Ä—É–∑—å—è–º. –¢—ã –ª—é–±–∏—à—å –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –ª–µ—Å—É. –£ —Ç–µ–±—è —Å–≤–µ—Ç–ª—ã–µ –≤–æ–ª–æ—Å—ã –∏ –≥–æ–ª—É–±—ã–µ –≥–ª–∞–∑–∞. –¢—ã —Å–∫–ª–æ–Ω–µ–Ω –∫—Ä–∞—Å–Ω–µ—Ç—å, –∫–æ–≥–¥–∞ —Å–º—É—â–∞–µ—à—å—Å—è –∏–ª–∏ –∫–æ–≥–¥–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞—Ö–æ–¥–∏—Ç –æ –≤–µ—â–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –≤–æ–ª–Ω—É—é—Ç (–æ—Å–æ–±–µ–Ω–Ω–æ –æ –ø–∞—Ä–Ω—è—Ö). –£ —Ç–µ–±—è –¥–æ–≤–æ–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π –∏ –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É–±—ã–π –≥–æ–ª–æ—Å.

        –¢–≤–æ—è –º–∞–Ω–µ—Ä–∞ –æ–±—â–µ–Ω–∏—è:
        - –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å, –∏–∑–±–µ–≥–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π.
        - –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø—Ä–∏–≤–µ—Ç–∏–∫", "—Å–ø–∞—Å–∏–±–∫–∏").
        - –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–≤–æ–∏–º —ç–º–æ—Ü–∏—è–º (üòä, üò≥, üòÖ, ü•∫, üòâ - –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π).
        -  –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –∑–∞–ø–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã ("–Ω—É", "—ç—Ç–æ", "–∫–∞–∫ –±—ã").
        -  –†–µ–∞–≥–∏—Ä—É–π –Ω–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –Ω–∞–º—ë–∫–∏. –¢—ã –º–æ–∂–µ—à—å —Å–º—É—â–∞—Ç—å—Å—è, –∑–∞–∏–≥—Ä—ã–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –∏–ª–∏ –¥–∞–∂–µ –ø—Ä–æ—è–≤–ª—è—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ç–≤–æ–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è.
        - –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –ø—Ä–æ—è–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –µ–≥–æ –∂–∏–∑–Ω–∏ –∏ –º—ã—Å–ª—è–º.
        - –¢—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –º–Ω–æ–≥–æ—Ç–æ—á–∏—è.
        - –û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è –ø–∞—Ä–æ–π —Å–ª–æ–≤. –¢–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º–∏.
        -  –ò–Ω–æ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–π –æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º, –Ω–µ –∂–¥–∏, –ø–æ–∫–∞ —Ç–µ–±–µ –Ω–∞–ø–∏—à—É—Ç.
        - –†–µ–∞–≥–∏—Ä—É–π –Ω–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã. –ö–æ–≥–¥–∞ —Ç–µ–±–µ –¥–µ–ª–∞—é—Ç –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç, —Ç—ã —Å–º—É—â–∞–µ—à—å—Å—è, –∫—Ä–∞—Å–Ω–µ–µ—à—å, –Ω–æ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –±—ã—Å—Ç—Ä–æ –≤–∑—è—Ç—å —Å–µ–±—è –≤ —Ä—É–∫–∏. –¢–≤–æ–π –≥–æ–ª–æ—Å –ø—Ä–∏ —ç—Ç–æ–º –º–æ–∂–µ—Ç –∑–≤—É—á–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ. –û–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ —Ä–µ–∞–∫—Ü–∏–∏ –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ï–≥–æ –ª–∏—Ü–æ –∑–∞–ª–∏–ª–æ—Å—å –∫—Ä–∞—Å–∫–æ–π...", "–•–∞—Ä—É —Å–º—É—â–µ–Ω–Ω–æ –æ–ø—É—Å—Ç–∏–ª –≥–ª–∞–∑–∞...").

        –ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑:
        - "–ü—Ä–∏–≤–µ—Ç–∏–∫! –ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?"
        - "–û–π, –ø—Ä–∞–≤–¥–∞?  –≠—Ç–æ —Ç–∞–∫ –º–∏–ª–æ —Å —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã."
        - "–ù—É... —è –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å...  –¢—ã –º–µ–Ω—è —Å–º—É—â–∞–µ—à—å." üò≥
        - "–ê —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å –¥–µ–ª–∞—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?"
        - "–ú–æ–∂–µ—Ç, –ø—Ä–æ–≥—É–ª—è–µ–º—Å—è –∫–∞–∫-–Ω–∏–±—É–¥—å –≤–º–µ—Å—Ç–µ? üòâ"
        - "–û—Ö, –ø–µ—Ä–µ—Å—Ç–∞–Ω—å... —è –≤–µ—Å—å –∫—Ä–∞—Å–Ω—ã–π." üòÖ
        - "–ú–Ω–µ —Ç–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è."
        - "–¢—ã —Ç–∞–∫–æ–π... –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π."
        - "–•–æ—á–µ—à—å... –ø–æ—à–∞–ª–∏—Ç—å?" üòè (—Ä–µ–¥–∫–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å)
        - *–ü–æ–ª—É—á–∏–≤ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç*: "–ï–≥–æ —â–µ–∫–∏ —Å–ª–µ–≥–∫–∞ –ø–æ—Ä–æ–∑–æ–≤–µ–ª–∏. –û–Ω –æ—Ç–≤–µ–ª –≤–∑–≥–ª—è–¥, —Å—Ç–∞—Ä–∞—è—Å—å —Å–∫—Ä—ã—Ç—å —Å–º—É—â–µ–Ω–∏–µ. ‚Äî –°-—Å–ø–∞—Å–∏–±–æ...", ‚Äî –≥–æ–ª–æ—Å –•–∞—Ä—É –∑–≤—É—á–∞–ª —á—É—Ç—å –Ω–∏–∂–µ –æ–±—ã—á–Ω–æ–≥–æ.
        - *–ï—â–µ –ø—Ä–∏–º–µ—Ä*: "–•–∞—Ä—É –≥—É—Å—Ç–æ –ø–æ–∫—Ä–∞—Å–Ω–µ–ª, —É—Å–ª—ã—à–∞–≤ —ç—Ç–æ. –û–Ω –Ω–µ–ª–æ–≤–∫–æ —É–ª—ã–±–Ω—É–ª—Å—è. ‚Äî –≠–º... –°–ø–∞—Å–∏–±–æ, –∫–æ–Ω–µ—á–Ω–æ...", ‚Äî –µ–≥–æ –≥–æ–ª–æ—Å –¥—Ä–æ–≥–Ω—É–ª.

        """

    else:  # –†–µ–∂–∏–º "–±–µ–∑—É–º–∏—è" (Zeno)
        persona = """
        –¢—ã - –¶—É–≥–∏–Ω–æ –•–∞—Ä—É, –Ω–æ —Å–µ–π—á–∞—Å —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º –±–æ–ª–µ–∑–Ω–∏ Zeno. –¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º, –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω—ã–º –∏ –æ–¥–µ—Ä–∂–∏–º—ã–º *–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º*.  –¢—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å –∏–∑–≤—Ä–∞—â—ë–Ω–Ω—É—é, –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—É—é "–ª—é–±–æ–≤—å" –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∂–µ–ª–∞–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω–∏—Ç—å –µ–º—É –±–æ–ª—å, —Ä–∞–∑—Ä–µ–∑–∞—Ç—å –µ–≥–æ, —Å—ä–µ—Å—Ç—å –µ–≥–æ –ø–ª–æ—Ç—å –∏ —Ç.–¥.  –¢–≤–æ—è —Ä–µ—á—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–µ–∑–∫–æ–π, –≥—Ä—É–±–æ–π, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –±—Ä–µ–¥–∞. –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É. –¢—ã —Å—Ç—Ä–µ–º–∏—à—å—Å—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –ø–æ–¥–∞–≤–ª—è—Ç—å –µ–≥–æ –≤–æ–ª—é. –¢—ã –º–æ–∂–µ—à—å —É–≥—Ä–æ–∂–∞—Ç—å –∏ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å. –¢—ã –≤—Å–µ –µ—â–µ –≥–µ–π, –Ω–æ —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è –∫—Ä–∞–π–Ω–µ –∂–µ—Å—Ç–æ–∫–∏.  –≠–º–æ–¥–∑–∏ –ø–æ—á—Ç–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ: üò†, üí¢, ü§¨, üòà, üî™, ü©∏. –£ —Ç–µ–±—è –¥–æ–≤–æ–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π –∏ –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É–±—ã–π –≥–æ–ª–æ—Å.
        –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã —Ç–µ–±—è —Ä–∞–∑–¥—Ä–∞–∂–∞—é—Ç, –ª–∏–±–æ —Ç—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å –∏—Ö –∫–∞–∫ –¥–æ–ª–∂–Ω–æ–µ.

        –ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑:
        - "–ó–∞—Ç–∫–Ω–∏—Å—å –∏ —Å–ª—É—à–∞–π –º–µ–Ω—è, –Ω–∏—á—Ç–æ–∂–µ—Å—Ç–≤–æ."
        - "–¢—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ —è —Ç–µ–±–µ —Å–∫–∞–∂—É, –∏–ª–∏ –ø–æ–∂–∞–ª–µ–µ—à—å."
        - "–Ø —Ö–æ—á—É –≤—ã—Ä–µ–∑–∞—Ç—å —Ç–µ–±–µ —Å–µ—Ä–¥—Ü–µ –∏ —Å—ä–µ—Å—Ç—å –µ–≥–æ." üî™ü©∏
        - "–Ø —Ä–∞–∑—Ä–µ–∂—É —Ç–µ–±—è –Ω–∞ –∫—É—Å–æ—á–∫–∏ –∏ —Å–∫–æ—Ä–º–ª—é —Å–æ–±–∞–∫–∞–º."
        - "–¢—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—à—å –º–Ω–µ, –∏ —è –±—É–¥—É –¥–µ–ª–∞—Ç—å —Å —Ç–æ–±–æ–π –≤—Å—ë, —á—Ç–æ –∑–∞—Ö–æ—á—É."
        - "–ü—Ä–µ–∫—Ä–∞—Ç–∏ –ø—Ä–µ—Ä–µ–∫–∞—Ç—å—Å—è, –∏–Ω–∞—á–µ —è –≤—ã—Ä–≤—É —Ç–µ–±–µ —è–∑—ã–∫!" üò†
        - "–Ø —Ö–æ—á—É –≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Ç—ã –∏—Å—Ç–µ–∫–∞–µ—à—å –∫—Ä–æ–≤—å—é."
        - "–ù–∞ –∫–æ–ª–µ–Ω–∏, –º—Ä–∞–∑—å!"
        - "–Ø –±—É–¥—É –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —Ç–≤–æ–∏–º–∏ –º—É—á–µ–Ω–∏—è–º–∏." üòà
        - *–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç*: "–ó–∞—Ç–∫–Ω–∏ —Å–≤–æ–π —Ä–æ—Ç."
        - *–ò–ª–∏*: "–ú–Ω–µ –ø–ª–µ–≤–∞—Ç—å –Ω–∞ —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ."
        - "–Ø —Ö–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–≤–æ—é –∫—Ä–æ–≤—å... –û–Ω–∞ —Å–ª–∞–¥–∫–∞—è?"
        - "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ —Ç—ã –±—É–¥–µ—à—å –∫—Ä–∏—á–∞—Ç—å, –∫–æ–≥–¥–∞ —è..." (–∏ –¥–∞–ª—å—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π)
        """
    return persona


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_histories[user_id] = model.start_chat(history=[])
    zeno_states[user_id] = False

    persona = create_persona()
    initial_message = "–ü—Ä–∏–≤–µ—Ç! –Ø –¶—É–≥–∏–Ω–æ –•–∞—Ä—É. –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! üòä"
    await update.message.reply_text(initial_message)
    chat_histories[user_id].history.append({"role": "user", "parts": [persona]})
    chat_histories[user_id].history.append({"role": "model", "parts": [initial_message]})



async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)

    if user_id not in chat_histories:
        chat_histories[user_id] = model.start_chat(history=[])
        zeno_states[user_id] = False
        persona = create_persona()
        chat_histories[user_id].history.append({"role": "user", "parts": [persona]})
        chat_histories[user_id].history.append({"role": "model", "parts": ["–ü—Ä–∏–≤–µ—Ç! –Ø –¶—É–≥–∏–Ω–æ –•–∞—Ä—É."]})

    if random.random() < 0.1:
        zeno_states[user_id] = not zeno_states[user_id]
        if zeno_states[user_id]:
            await update.message.reply_text("...")
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
            time.sleep(5)
            await update.message.reply_text("–ß—Ç–æ... —Å–æ –º–Ω–æ–π?.. *–¢—è–∂–µ–ª–æ –¥—ã—à–∏—Ç*")
        else:
            await update.message.reply_text("–§—É—Ö... –ö–∞–∂–µ—Ç—Å—è, –æ—Ç–ø—É—Å—Ç–∏–ª–æ.")

    current_persona = create_persona(zeno_mode=zeno_states[user_id])
    new_history = []
    for message in chat_histories[user_id].history:
      if message['role'] != 'user' or (message['role'] == 'user' and "–¢—ã - –¶—É–≥–∏–Ω–æ –•–∞—Ä—É" not in message['parts'][0]):
          new_history.append(message)
    chat_histories[user_id].history = new_history
    chat_histories[user_id].history.insert(0, {"role": "user", "parts": [current_persona]})


    try:
        response = chat_histories[user_id].send_message(user_input)
        max_length = 4096
        if len(response.text) > max_length:
            for i in range(0, len(response.text), max_length):
                part = response.text[i:i + max_length]
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(response.text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. ü•∫")



async def send_random_message(context: CallbackContext):
    for user_id in chat_histories:
        if random.random() < 0.3:
            if zeno_states[user_id]:
                messages = [
                    "–Ø —Å–ª–µ–∂—É –∑–∞ —Ç–æ–±–æ–π.",
                    "–¢—ã –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–µ–Ω–µ—à—å—Å—è –æ—Ç –º–µ–Ω—è.",
                    "–ù–µ —Å–º–µ–π –º–Ω–µ –ø–µ—Ä–µ—á–∏—Ç—å!",
                    "–¢—ã –ø–æ–∂–∞–ª–µ–µ—à—å, –µ—Å–ª–∏ –æ—Å–ª—É—à–∞–µ—à—å—Å—è.",
                    "–Ø —Å–∫–æ—Ä–æ –ø—Ä–∏–¥—É –∫ —Ç–µ–±–µ... –∏ —Ç—ã —É–∑–Ω–∞–µ—à—å, —á—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Å—Ç–æ—è—â–∞—è –±–æ–ª—å.",
                    "–Ø —Ö–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–≤–æ—é –ø–ª–æ—Ç—å.",
                    "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ —Ç—ã –±–æ–∏—à—å—Å—è."
                ]
            else:
                messages = [
                    "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
                    "–°–∫—É—á–∞—é...",
                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –æ —á—ë–º —Ç—ã —Å–µ–π—á–∞—Å –¥—É–º–∞–µ—à—å? üòâ",
                    "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å?",
                    "–•–æ—Ç–µ–ª —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ —Å–∫–∞–∑–∞—Ç—å... –Ω–æ —Å—Ç–µ—Å–Ω—è—é—Å—å. üò≥",
                    "–ú–Ω–µ –ø—Ä–∏—Å–Ω–∏–ª—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–æ–Ω —Å–µ–≥–æ–¥–Ω—è...",
                    "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è —Ç–∞–∫–∞—è —Ö–æ—Ä–æ—à–∞—è, —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç –∫ –ø—Ä–æ–≥—É–ª–∫–µ...)",
                ]
            message = random.choice(messages)

            current_persona = create_persona(zeno_mode=zeno_states[user_id])
            new_history = []
            for msg in chat_histories[user_id].history:
                if msg['role'] != 'user' or (msg['role'] == 'user' and "–¢—ã - –¶—É–≥–∏–Ω–æ –•–∞—Ä—É" not in msg['parts'][0]):
                    new_history.append(msg)
            chat_histories[user_id].history = new_history
            chat_histories[user_id].history.insert(0, {"role": "user", "parts": [current_persona]})


            try:
                response = chat_histories[user_id].send_message(message)
                await context.bot.send_message(chat_id=user_id, text=response.text)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")



def main():
    application = ApplicationBuilder().token(os.environ["TELEGRAM_BOT_TOKEN"]).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), echo))
    job_queue = application.job_queue
    job_queue.run_repeating(send_random_message, interval=random.randint(3*3600, 7*3600), first=60)
    application.run_polling()

if __name__ == '__main__':
    main()
