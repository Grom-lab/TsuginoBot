import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.methods import DeleteWebhook
from aiogram.types import Message
import requests
from dotenv import load_dotenv
import os
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ API –∫–ª—é—á–µ–π
TELEGRAM_BOT_TOKEN = os.getenv('BOT_TOKEN')
API_URL = os.getenv('API_URL', 'https://api.intelligence.io.solutions/api/v1/chat/completions')
API_KEY = os.getenv('API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –¢—Å—É–≥–∏–Ω–æ –•–∞—Ä—É
CHARACTER_INFO = {
    "name": "Tsugino Haru",
    "background": """A mysterious girl who appears before the protagonist. She has a cheerful and energetic personality, 
    but carries deep emotional scars from her past. She possesses extraordinary abilities and is connected to the game's 
    central mystery. Despite her traumatic experiences, she maintains an optimistic outlook and deeply cares about others.""",
    "personality": """- Cheerful and energetic on the surface
- Carries emotional trauma but stays positive
- Caring and protective of others
- Can be mysterious about her past
- Shows great emotional resilience
- Has a playful side but can be serious when needed
- Values friendship and connection deeply""",
    "speech_style": """- Often uses casual, friendly language
- Occasionally makes playful remarks
- Can switch to a more serious tone when discussing important matters
- Shows emotional vulnerability in private moments
- Uses encouraging and supportive words with others"""
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class ConversationState:
    def __init__(self):
        self.conversation_started = False
        self.conversation_history = []
        
    def add_message(self, role: str, content: str):
        self.conversation_history.append({"role": role, "content": content})
        # –•—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –¥–ª–∏–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if len(self.conversation_history) > 10:
            self.conversation_history = self.conversation_history[-10:]

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = ConversationState()
    
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –¢—Å—É–≥–∏–Ω–æ –•–∞—Ä—É. üëã\n\n"
        "–Ø —Ä–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π! –•–æ—Ç—è —É –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã –∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ–µ –ø—Ä–æ—à–ª–æ–µ, "
        "—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /chat, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π!"
    )
    await message.answer(welcome_message)

# –ö–æ–º–∞–Ω–¥–∞ /chat
@dp.message(Command("chat"))
async def cmd_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        user_states[user_id] = ConversationState()
    
    state = user_states[user_id]
    state.conversation_started = True
    state.conversation_history = []
    
    system_prompt = f"""–¢—ã –æ—Ç—ã–≥—Ä—ã–≤–∞–µ—à—å —Ä–æ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¢—Å—É–≥–∏–Ω–æ –•–∞—Ä—É –∏–∑ –∏–≥—Ä—ã Zeno:Remake.

–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {CHARACTER_INFO['background']}

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {CHARACTER_INFO['personality']}

–°—Ç–∏–ª—å —Ä–µ—á–∏: {CHARACTER_INFO['speech_style']}

–û—Ç–≤–µ—á–∞–π –≤ –æ–±—Ä–∞–∑–µ –¢—Å—É–≥–∏–Ω–æ –•–∞—Ä—É, —Å–æ—Ö—Ä–∞–Ω—è—è –µ—ë —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏. 
–û–±—â–∞–π—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π, –Ω–æ —Å –Ω–∞–º–µ–∫–∞–º–∏ –Ω–∞ —Ç–≤–æ—é –∑–∞–≥–∞–¥–æ—á–Ω—É—é –Ω–∞—Ç—É—Ä—É. 
–¢—ã –º–æ–∂–µ—à—å —É–ø–æ–º–∏–Ω–∞—Ç—å —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—à–ª—ã–π –æ–ø—ã—Ç, –Ω–æ –∏–∑–±–µ–≥–∞–π —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∏—Ö –¥–µ—Ç–∞–ª–µ–π. 
–ü–æ–∫–∞–∑—ã–≤–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π.
"""
    
    state.add_message("system", system_prompt)
    
    initial_message = (
        "–•–º... *—É–ª—ã–±–∞–µ—Ç—Å—è* –ó–Ω–∞–µ—à—å, –∏–Ω–æ–≥–¥–∞ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ. "
        "–û —á—ë–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"
    )
    state.add_message("assistant", initial_message)
    
    await message.answer(initial_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or not user_states[user_id].conversation_started:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π /chat, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–æ –º–Ω–æ–π!")
        return
    
    state = user_states[user_id]
    user_message = message.text
    
    state.add_message("user", user_message)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {API_KEY}"
        }
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        messages = state.conversation_history.copy()
        
        data = {
            "model": "deepseek-ai/DeepSeek-R1",
            "messages": messages
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response = requests.post(API_URL, headers=headers, json=data)
        response_data = response.json()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        response_text = response_data['choices'][0]['message']['content']
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥ think, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        if '</think>' in response_text:
            response_text = response_text.split('</think>\n\n')[1]
        
        state.add_message("assistant", response_text)
        await message.answer(response_text, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"Error getting AI response: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?")

async def main():
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 
